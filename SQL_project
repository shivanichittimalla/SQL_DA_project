-- 1Q
SELECT COUNT (DISTINCT games) AS total_olympic_games FROM olympics_history;

--2Q
SELECT year, season, city FROM olympics_history;

--3Q
SELECT games, COUNT(DISTINCT region) AS total_countries FROM olympics_history
INNER JOIN olympics_history_noc_regions ON olympics_history.noc = olympics_history_noc_regions.noc
GROUP BY games;

--4Q
WITH all_countries AS
              (SELECT games, nr.region
              FROM olympics_history AS oh
              JOIN olympics_history_noc_regions AS nr ON nr.noc = oh.noc
              GROUP BY games, nr.region),
          tot_countries AS
              (SELECT games, COUNT(1) AS total_countries
              FROM all_countries
              GROUP BY games)
      SELECT DISTINCT
      concat(FIRST_VALUE(games) OVER(ORDER BY total_countries)
      , ' - '
      , FIRST_VALUE(total_countries) OVER(ORDER BY total_countries)) AS Lowest_Countries,
      concat(FIRST_VALUE(games) OVER(ORDER BY total_countries DESC)
      , ' - '
      , FIRST_VALUE(total_countries) OVER(ORDER BY total_countries DESC)) AS Highest_Countries
      FROM tot_countries
      ORDER BY 1;
	  
--5Q	  
WITH all_countries AS (
	SELECT games, nr.region
	FROM olympics_history AS od
	JOIN olympics_history_noc_regions AS nr
	ON od.noc = nr.noc
	GROUP BY games, nr.region
	ORDER BY games),
game_count_result AS
	(SELECT region, COUNT(games) AS game_count
	FROM all_countries
	GROUP BY region
	ORDER BY game_count DESC)
SELECT region AS Countries, game_count
FROM game_count_result
WHERE game_count >= (SELECT COUNT(DISTINCT games)
					FROM all_countries);
					
--6Q					
 WITH t1 AS
          	(SELECT COUNT(DISTINCT games) AS total_games
          	FROM olympics_history WHERE season = 'Summer'),
          t2 AS
          	(SELECT DISTINCT games, sport
          	FROM olympics_history WHERE season = 'Summer'),
          t3 AS
          	(SELECT sport, COUNT(1) AS no_of_games
          	FROM t2
          	GROUP BY sport)
      SELECT *
      FROM t3
      JOIN t1 ON t1.total_games = t3.no_of_games;
	  
--7Q	  
WITH t1 AS
          	(SELECT DISTINCT games, sport
          	FROM olympics_history),
          t2 AS
          	(SELECT sport, COUNT(1) AS no_of_games
          	FROM t1
          	GROUP BY sport)
      SELECT t2.*, t1.games
      FROM t2
      JOIN t1 ON t1.sport = t2.sport
      WHERE t2.no_of_games = 1
      ORDER BY t1.sport;
	  
--8Q	  
WITH t1 AS
      	(SELECT DISTINCT games, sport
      	FROM olympics_history),
        t2 AS
      	(SELECT games, COUNT(1) AS no_of_sports
      	FROM t1
      	GROUP BY games)
      SELECT * FROM t2
      ORDER BY no_of_sports DESC;
	  
--9Q	  
WITH temp AS
            (SELECT name,sex,CAST(CASE WHEN age = 'NA' THEN '0' ELSE age END AS int) AS age
              ,team, games, city, sport, event, medal
            FROM olympics_history),
        ranking AS
            (SELECT *, RANK() OVER(ORDER BY age DESC) AS rnk
            FROM TEMP
            WHERE medal='Gold')
    SELECT *
    FROM ranking
    WHERE rnk = 1;
	
--10Q	
WITH t1 AS
        	(SELECT sex, COUNT(1) AS cnt
        	FROM olympics_history
        	GROUP BY sex),
        t2 AS
        	(SELECT *, ROW_NUMBER() OVER(ORDER BY cnt) AS rn
        	 FROM t1),
        min_cnt AS
		(SELECT cnt FROM t2	WHERE rn = 1),
        max_cnt AS
        	(SELECT cnt FROM t2	WHERE rn = 2)
    SELECT concat('1 : ', round(max_cnt.cnt::decimal/min_cnt.cnt, 2)) AS ratio
    FROM min_cnt, max_cnt;
	
--11Q	
WITH t1 AS
            (SELECT name, team, COUNT(1) AS total_gold_medals
            FROM olympics_history
            WHERE medal = 'Gold'
            GROUP BY name, team
            ORDER BY total_gold_medals DESC),
        t2 AS
            (SELECT *, DENSE_RANK() OVER(ORDER BY total_gold_medals DESC) AS rnk
            FROM t1)
    SELECT name, team, total_gold_medals
    FROM t2
    WHERE rnk <= 5;
	
--12Q	
 WITH t1 AS
            (SELECT name, team, COUNT(1) AS total_medals
            FROM olympics_history
            WHERE medal IN ('Gold', 'Silver', 'Bronze')
            GROUP BY name, team
            ORDER BY total_medals DESC),
        t2 AS
            (SELECT *, DENSE_RANK() OVER(ORDER BY total_medals DESC) AS rnk
            FROM t1)
    SELECT name, team, total_medals
    FROM t2
    WHERE rnk <= 5;
	
--13Q	
WITH t1 AS
            (SELECT nr.region, COUNT(1) AS total_medals
            FROM olympics_history AS oh
            JOIN olympics_history_noc_regions AS nr ON nr.noc = oh.noc
            WHERE medal <> 'NA'
            GROUP BY nr.region
            ORDER BY total_medals DESC),
        t2 AS
            (SELECT *, DENSE_RANK() OVER(ORDER BY total_medals DESC) AS rnk
            FROM t1)
    SELECT *
    FROM t2
    WHERE rnk <= 5;
	
--14Q
CREATE EXTENSION TABLEFUNC;

SELECT country
    	, coalesce(gold, 0) AS gold
    	, coalesce(silver, 0) AS silver
    	, coalesce(bronze, 0) AS bronze
    FROM CROSSTAB('SELECT nr.region as country
    			, medal
    			, count(1) as total_medals
    			FROM olympics_history oh
    			JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    			where medal <> ''NA''
    			GROUP BY nr.region,medal
    			order BY nr.region,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(country varchar, bronze bigint, gold bigint, silver bigint)
    ORDER BY gold DESC, silver DESC, bronze DESC;
	
--15Q	
SELECT substring(games,1,position(' - ' in games) - 1) AS games
        , substring(games,position(' - ' in games) + 3) AS country
        , coalesce(gold, 0) AS gold
        , coalesce(silver, 0) AS silver
        , coalesce(bronze, 0) AS bronze
    FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
                , medal
                , count(1) as total_medals
                FROM olympics_history oh
                JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
                where medal <> ''NA''
                GROUP BY games,nr.region,medal
                order BY games,medal',
            'values (''Bronze''), (''Gold''), (''Silver'')')
    AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint);
	
--16Q	
WITH temp as
    	(SELECT substring(games, 1, position(' - ' in games) - 1) AS games
    	 	, substring(games, position(' - ' in games) + 3) AS country
            , coalesce(gold, 0) AS gold
            , coalesce(silver, 0) AS silver
            , coalesce(bronze, 0) AS bronze
    	FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
    					, medal
    				  	, count(1) as total_medals
    				  FROM olympics_history oh
    				  JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    				  where medal <> ''NA''
    				  GROUP BY games,nr.region,medal
    				  order BY games,medal',
                  'values (''Bronze''), (''Gold''), (''Silver'')')
    			   AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint))
    SELECT DISTINCT games
    	, concat(first_value(country) over(partition by games order by gold desc)
    			, ' - '
    			, first_value(gold) over(partition by games order by gold desc)) as Max_Gold
    	, concat(first_value(country) over(partition by games order by silver desc)
    			, ' - '
    			, first_value(silver) over(partition by games order by silver desc)) as Max_Silver
    	, concat(first_value(country) over(partition by games order by bronze desc)
    			, ' - '
    			, first_value(bronze) over(partition by games order by bronze desc)) as Max_Bronze
    FROM temp
    ORDER BY games;
	
--17Q	
WITH temp as
    	(SELECT substring(games, 1, position(' - ' in games) - 1) as games
    		, substring(games, position(' - ' in games) + 3) as country
    		, coalesce(gold, 0) as gold
    		, coalesce(silver, 0) as silver
    		, coalesce(bronze, 0) as bronze
    	FROM CROSSTAB('SELECT concat(games, '' - '', nr.region) as games
    					, medal
    					, count(1) as total_medals
    				  FROM olympics_history oh
    				  JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    				  where medal <> ''NA''
    				  GROUP BY games,nr.region,medal
    				  order BY games,medal',
                  'values (''Bronze''), (''Gold''), (''Silver'')')
    			   AS FINAL_RESULT(games text, bronze bigint, gold bigint, silver bigint)),
    	tot_medals as
    		(SELECT games, nr.region as country, count(1) as total_medals
    		FROM olympics_history oh
    		JOIN olympics_history_noc_regions nr ON nr.noc = oh.noc
    		where medal <> 'NA'
    		GROUP BY games,nr.region order BY 1, 2)
    SELECT DISTINCT t.games
    	, concat(first_value(t.country) over(partition by t.games order by gold desc)
    			, ' - '
    			, first_value(t.gold) over(partition by t.games order by gold desc)) as Max_Gold
    	, concat(first_value(t.country) over(partition by t.games order by silver desc)
    			, ' - '
    			, first_value(t.silver) over(partition by t.games order by silver desc)) as Max_Silver
    	, concat(first_value(t.country) over(partition by t.games order by bronze desc)
    			, ' - '
    			, first_value(t.bronze) over(partition by t.games order by bronze desc)) as Max_Bronze
    	, concat(first_value(tm.country) over (partition by tm.games order by total_medals desc nulls last)
    			, ' - '
    			, first_value(tm.total_medals) over(partition by tm.games order by total_medals desc nulls last)) as Max_Medals
    FROM temp t
    JOIN tot_medals tm on tm.games = t.games and tm.country = t.country
    ORDER BY games;
	
--18Q	
SELECT * FROM (
    	SELECT country, coalesce(gold,0) as gold, coalesce(silver,0) as silver, coalesce(bronze,0) as bronze
    		FROM CROSSTAB('SELECT nr.region as country
    					, medal, count(1) as total_medals
    					FROM OLYMPICS_HISTORY oh
    					JOIN OLYMPICS_HISTORY_NOC_REGIONS nr ON nr.noc=oh.noc
    					where medal <> ''NA''
    					GROUP BY nr.region,medal order BY nr.region,medal',
                    'values (''Bronze''), (''Gold''), (''Silver'')')
    		AS FINAL_RESULT(country varchar,
    		bronze bigint, gold bigint, silver bigint)) x
    WHERE gold = 0 and (silver > 0 or bronze > 0)
    ORDER BY gold desc nulls last, silver desc nulls last, bronze desc nulls last;
	
--19Q					
WITH t1 AS
        	(select sport, count(1) as total_medals
        	from olympics_history
        	where medal <> 'NA'
        	and team = 'India'
        	group by sport
        	order by total_medals desc),
        t2 AS
        	(select *, rank() over(order by total_medals desc) as rnk
        	from t1)
    SELECT sport, total_medals
    FROM t2
    WHERE rnk = 1;
	
--20Q	
SELECT team, sport, games, COUNT(1) AS total_medals
    FROM olympics_history
    WHERE medal <> 'NA'
    AND team = 'India' AND sport = 'Hockey'
    GROUP BY team, sport, games
    ORDER BY total_medals DESC;	